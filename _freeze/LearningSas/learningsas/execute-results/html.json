{
  "hash": "da940721e7472f864a5ff3427dcef788",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Learning SAS\"\nsidebar: auto\nauthor:\n  - Jumbong Junior \ncategories: []\ntags: []\n\ntitle-block-banner: false\nformat: \n  html: \n    mainfont: Times New Roman\n    fontsize: 16pt\n\njupyter: python3\n        \n---\n\n\n# Introduction\n\nThis document is a compilation of what is essential to know about SAS programming. The are two notions that are fondamental to understand before diving into the SaS programming language. These are the data step and the proc step.\n\nThe data step consists to create a dataset and to manipulate it. The proc step is used to analyze the data.\n\nBefore starting, let's talk about the `libname`.\n\n### Libname\n\nThe `libname` statement is used to assign a library reference name to a physical location. The example below shows how to assign the reference name `Inputs` and `outputs` to the physical location `/home/u63691422/EPG1V2/data` and `/home/u63691422/EPG1V2/Jumbong_Training/Outputs` respectively.\n\n```default\nTlibname Inputs \"/home/u63691422/EPG1V2/data\" ;\nlibname Outputs \"/home/u63691422/EPG1V2/Jumbong_Training/Outputs\";\n```\n\n# Data Step\n\nThe syntax of the data step is as follows:\n\n```default\nDATA Outputs.mydata;\n    SET Inputs.mydata;\nRUN;\n```\n## Operator summary table\n\n### Table of comparison operators\n\n| Operator | Symbol | Meaning                  |\n|----------|--------|--------------------------|\n| LT       | <      | Less than               |\n| GT       | >      | Greater than            |\n| LE       | <=     | Less than or equal to   |\n| GE       | >=     | Greater than or equal to |\n| EQ       | =      | Equal to                |\n| NE       | ^=     | Not equal to            |\n| IN       | IN     | In a list of values     |\n\n\n### Logical operators table\n| Operator | Symbol | Meaning |\n|----------|--------|---------|\n| AND | & | Logical AND |\n| OR | ! | Logical OR |\n| NOT | ~ | Logical NOT |Â \n\n### Arithmetic operators table\n| Operator | Symbol | Meaning |\n|----------|--------|---------|\n| ADD | + | Addition |\n| SUB | - | Subtraction |\n| MUL | * | Multiplication |\n| DIV | / | Division |\n| POW | ** | Exponentiation |\n| MOD | % | Modulus |\n| Max | <> | Maximum |\n| Min | >< | Minimum |\n### Operator of concatenation\n\nThe concatenation operator is used to concatenate two or more character strings. The concatenation operator is represented by two vertical bars (||).\n\n## Variables Selection\n\nIn order to select only some variables from the data source, the `keep` statement is used. \n\n```default\nDATA Outputs.mydata;\n    SET Inputs.mydata;\n    KEEP var1 var2 var3;\nRUN;\n```\n\n## Observation filtration\n\n- If it is important to extract only observations m and n from the data source, the `obs` statement is used.\n\n```default\nDATA Outputs.mydata;\n    SET Inputs.mydata (firstobs=m obs=n);\nRUN;\n```\n\n- In order to select observations that meet certain conditions, the `WHERE` statement is used.\n\n```default\nDATA Outputs.mydata;\n    SET Inputs.mydata;\n    WHERE CONDITION;\nRUN;\n```\n\n",
    "supporting": [
      "learningsas_files"
    ],
    "filters": [],
    "includes": {}
  }
}
{
  "hash": "db5f131e65ffd8e0bebe4e4f779c8002",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Learning SAS\"\ndate: last-modified\nsidebar: auto\nauthor:\n  - Jumbong Junior \ncategories: []\ntags: []\n\ntitle-block-banner: false\nformat: \n  html: \n    fontsize: 1.1em\n\njupyter: python3\n        \n---\n\n\n# Introduction\n\nThis document is a compilation of what is essential to know about SAS programming. The are two notions that are fondamental to understand before diving into the SaS programming language. These are the data step and the proc step.\n\nThe data step consists to create a dataset and to manipulate it. The proc step is used to analyze the data.\n\nBefore starting, let's talk about the `libname`.\n\n### Libname\n\nThe `libname` statement is used to assign a library reference name to a physical location. The example below shows how to assign the reference name `Inputs` and `outputs` to the physical location `/home/u63691422/EPG1V2/data` and `/home/u63691422/EPG1V2/Jumbong_Training/Outputs` respectively.\n\n```default\nTlibname Inputs \"/home/u63691422/EPG1V2/data\" ;\nlibname Outputs \"/home/u63691422/EPG1V2/Jumbong_Training/Outputs\";\n```\n\n# Data Step\n\nThe syntax of the data step is as follows:\n\n```default\nDATA Outputs.mydata;\n    SET Inputs.mydata;\nRUN;\n```\n## Operator summary table\n\n### Table of comparison operators\n\n| Operator | Symbol | Meaning                  |\n|----------|--------|--------------------------|\n| LT       | <      | Less than               |\n| GT       | >      | Greater than            |\n| LE       | <=     | Less than or equal to   |\n| GE       | >=     | Greater than or equal to |\n| EQ       | =      | Equal to                |\n| NE       | ^=     | Not equal to            |\n| IN       | IN     | In a list of values     |\n\n\n### Logical operators table\n| Operator | Symbol | Meaning |\n|----------|--------|---------|\n| AND | & | Logical AND |\n| OR | ! | Logical OR |\n| NOT | ~ | Logical NOT | \n\n### Arithmetic operators table\n| Operator | Symbol | Meaning |\n|----------|--------|---------|\n| ADD | + | Addition |\n| SUB | - | Subtraction |\n| MUL | * | Multiplication |\n| DIV | / | Division |\n| POW | ** | Exponentiation |\n| MOD | % | Modulus |\n| Max | <> | Maximum |\n| Min | >< | Minimum |\n### Operator of concatenation\n\nThe concatenation operator is used to concatenate two or more character strings. The concatenation operator is represented by two vertical bars (||).\n\n## Variables Selection\n\nIn order to select only some variables from the data source, the `keep` statement is used. \n\n```default\nDATA Outputs.mydata;\n    SET Inputs.mydata;\n    KEEP var1 var2 var3;\nRUN;\n```\n\n## Observation filtration\n\n- If it is important to extract only observations m and n from the data source, the `obs` statement is used.\n\n```default\nDATA Outputs.mydata;\n    SET Inputs.mydata (firstobs=m obs=n);\nRUN;\n```\n\n- In order to select observations that meet certain conditions, the `WHERE` statement is used.\n\n```default\nDATA Outputs.mydata;\n    SET Inputs.mydata;\n    WHERE CONDITION;\nRUN;\n```\n\n## Cumulative sum by group of a variable.\n\n```default\n\nproc sort data=INPUTS.class_update out=class_sorted;\n   by Sex;\nrun;\n\ndata output;\n   set class_sorted(keep=Sex Age);\n   by Sex;\n   retain s_age;\n   if first.Sex then s_age = Age; /* Réinitialiser pour chaque groupe */\n   else s_age + Age; /* Cumul des âges */\n  \n   if last.Sex then output;\nrun;\n\nRUN;\n\nThis code compute the cumulative sum of the variable Age by group of the variable and then take the end last element of each group which corresponds to the cumulative sum of the variable Age by group.\n\n## Conactenation and control concatenation\n\n```default\nDATA Outputs.mydata; \n    SET table1 table2;\nRUN;\n```\n\n```default\nDATA Outputs.mydata; \n    SET table1 table2;\n    BY ID;\nRUN;\n````\n\n## Compute the frequency of a variable in a dataset and the frequency of missing values of the variable.\n\n```default\nPROC FREQ data = Outputs.mydata ;\n    table variable/missing;\nRUN;\n```\n\n## Frequency on each sheet of an Excel file\n\n```default\n\n/* Module : Macro \nInput : \n    - data : dataset\n    - list_var : macro variable containing the list of variables to compute the frequency\n    - path : path to save the excel file\nOutput :\n    - Excel file containing the frequency of the variables\n*/\n\n%macro export_freq(data, list_var, path);\n    %let nbvar = %sysfunc(countw(&list_var));\n\n    %do i = 1 %to &nbvar;\n        %let var = %scan(&list_var, &i);\n        PROC FREQ data = &data ;\n            tables &var /out = freq&var missing;\n        RUN;\n\n        PROC EXPORT data = freq&var\n            outfile = \"&path\"\n            dbms = xlsx replace;\n            sheet = \"&var\";\n        RUN;\n    %end;\n%mend export_freq;\n\n%export_freq(Outputs.mydata, var1 var2 var3, /home/u63691422/EPG1V2/Jumbong_Training/Outputs/freq.xlsx);\n\n```\n## if and else if statement\n\n```default\ndata Outputs.mydata;\n    set;\n    format methode_agregee $20.;\n    if methode_eng_agregee_1 in(\"IRB\") or methode_eng_agregee_2 in(\"IRB\") then methode_agregee = \"IRB\";\n    else if methode_eng_agregee_1 in(\"PD\") or methode_eng_agregee_2 in(\"PD\") then methode_agregee = \"PD\";\n    else if methode_eng_agregee_1 in(\"LGD\") or methode_eng_agregee_2 in(\"LGD\") then methode_agregee = \"LGD\";\n    else methode_agregee = \"Non renseigné\";\nrun;\n```\n\n## **\"Organizing Your Workspace Effectively\"**  \n\nTo work efficiently, it is essential to structure your workspace properly. For a well-organized project, create a main directory named after the project. This directory should include at least three subfolders .\n\n- **Input** (00_Inputs): Stores all raw data and input files.  \n- **Output** (01_Codes): Contains all generated data and results.  \n- **Codes** (03_Outputs): Holds all scripts and working files, possibly with additional subfolders.  \n\n\nEach file of each subfolder should resolve a specific task. Example : \n- The initialisation for all libraries should be in the file : `00_Libname_Init.sas`\n- The file which contains all macros should be named : `00_Macros.sas`\n\n",
    "supporting": [
      "prerequisites_files"
    ],
    "filters": [],
    "includes": {}
  }
}
{
  "hash": "65745456c9c258d86b01bb499901b544",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \" Missing data treatment and imputation in python\"\nsidebar: auto\nauthor:\n  - Jumbong Junior \ncategories: []\ntags: []\ntitle-block-banner: false\nhtml:\n    code-fold : true\njupyter: python3\n\n---\n\n\n\n# Introduction \n\n # Importation des bibliothèques nécessaires\nimport pandas as pd\nimport numpy as np\nfrom sklearn.experimental import enable_iterative_imputer  # Activation de l'IterativeImputer\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Définition de la fonction\ndef miss_forest_application_fold_mmsa(data_base_train, data_base_test, list_raw_ratios):\n    # Assurez-vous que les valeurs manquantes sont bien définies comme np.nan\n   # data_base_train = data_base_train.replace({None: np.nan, 'NA': np.nan, 'null': np.nan})\n    #data_base_test = data_base_test.replace({None: np.nan, 'NA': np.nan, 'null': np.nan})\n    \n    # Préparation des données d'entraînement\n    base_raw_ratios_train = data_base_train[list_raw_ratios].copy()\n    \n    # Imputation sur la base d'entraînement\n    imputer = IterativeImputer(\n        estimator=RandomForestRegressor(n_estimators=100, random_state=42),\n        max_iter=10,\n        random_state=42\n    )\n    imp_train = pd.DataFrame(\n        imputer.fit_transform(base_raw_ratios_train),\n        columns=list_raw_ratios,\n        index=base_raw_ratios_train.index\n    )\n    \n    # Remplacement des valeurs imputées dans la base d'entraînement originale\n    data_base_train.update(imp_train)\n    \n    # Imputation sur la base de test\n    base_raw_ratios_test = data_base_test[list_raw_ratios].copy()\n    imp_test = pd.DataFrame(\n        imputer.transform(base_raw_ratios_test),\n        columns=list_raw_ratios,\n        index=base_raw_ratios_test.index\n    )\n    \n    # Remplacement des valeurs imputées dans la base de test originale\n    data_base_test.update(imp_test)\n    \n    # Calcul des erreurs (facultatif)\n    errors = abs(imp_train - base_raw_ratios_train)\n    rmse_train = pd.DataFrame({\n        \"ratios\": list_raw_ratios,\n        \"RMSE\": np.sqrt((errors**2).mean(axis=0))\n    })\n\n    print(f\" The error is given by {errors}\")\n    \n    # Sélection des variables à garder ou à supprimer\n    vars_to_keep = rmse_train.loc[rmse_train[\"RMSE\"] < 1000, \"ratios\"]\n    vars_to_drop = rmse_train.loc[rmse_train[\"RMSE\"] > 0.5, \"ratios\"]\n    \n    # Filtrage des variables dans les bases d'entraînement et de test\n    final_train = data_base_train.loc[:, ~data_base_train.columns.isin(vars_to_drop)]\n    final_test = data_base_test.loc[:, data_base_test.columns.isin(vars_to_keep)]\n    \n    # Résultats finaux\n    return {\n        \"final_train\": final_train,\n        \"final_test\": final_test\n    }\n\n# Exemple de DataFrame\ndata_train = pd.DataFrame({\n    \"A\": [1, 2, np.nan, 4],\n    \"B\": [np.nan, 2, 3, 4],\n    \"C\": [5, 6, 7, np.nan]\n})\n\ndata_test = pd.DataFrame({\n    \"A\": [np.nan, 2, 3],\n    \"B\": [1, np.nan, 3],\n    \"C\": [4, 5, np.nan]\n})\n\nlist_vars = [\"A\", \"B\", \"C\"]\nresults = miss_forest_application_fold_mmsa(data_train, data_test, list_vars)\n\nresults[\"final_train\"], results[\"final_test\"]\n\n```\n\n```{python}\n\nimport pandas as pd\nimport numpy as np\nimport sys\nimport sklearn.neighbors._base\nsys.modules['sklearn.neighbors.base'] = sklearn.neighbors._base\nfrom missingpy import MissForest\n\n\n# No module named sklearn.neighbors.base\n\n# Sample DataFrame with missing values\ndata = {\n    'A': [1, 2, np.nan, 4],\n    'B': [np.nan, 2, 3, 4],\n    'C': ['cat', np.nan, 'dog', 'cat'],\n    'D': [1.5, 2.5, np.nan, 4.5]\n}\ndf = pd.DataFrame(data)\n\nprint(\"Original DataFrame:\")\nprint(df)\n\n# Convert categorical column to numerical codes (if needed)\ndf['C'] = df['C'].astype('category').cat.codes.replace(-1, np.nan)\n\n# Instantiate MissForest\nimputer = MissForest(random_state=42)\n\n# Impute missing values\nimputed_array = imputer.fit_transform(df.values)\n\n# Convert back to a DataFrame\ndf_imputed = pd.DataFrame(imputed_array, columns=df.columns)\n\n# Convert categorical columns back to original categories\ndf_imputed['C'] = df_imputed['C'].round().astype(int).map({0: 'cat', 1: 'dog'})\n\nprint(\"\\nDataFrame After Imputation:\")\nprint(df_imputed)\n\n```\n\n",
    "supporting": [
      "MissForest_files"
    ],
    "filters": [],
    "includes": {}
  }
}
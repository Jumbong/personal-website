{
  "hash": "335872ef8fe2cf1965c7b40f16307feb",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \" Linear Regression in Time Series: Sources of Spurious Regression\"\nsubtitle: \"A simulation of the results presented in the article by Granger and Newbold (1974)\"\ndate: last-modified\nsidebar: auto\nnumber-sections: false\ntoc: true\nauthor:\n  - Jumbong Junior \n\ncategories: []\ntags: [Time Series, Spurious Regression]\ntitle-block-banner: false\nbibliography: references.bib\nformat: \n  html: \n    mainfont: Times New Roman\n    fontsize: 1.1em\n\njupyter: python3\nnotice: |\n    @granger1974spurious\n---\n\n\n# Introduction\n\n## Motivation\n\nIt is common when analyzing the relationship between a dependent time series and several independent time series, to use the regression model. In their well know paper, @granger1974spurious found several articles in the literature, presenting regression models with apparently high goodness of fit, measured by the coefficient of determination, $R^2$, but with very low durbin-watson statistics. \n\nWhat is particularly surprising is that almost all  econometric textbook warns about the danger of autocorrelated errors, yet this issue persist in many published papers. @granger1974spurious identified several examples. For instance, they found published equations with $R^2 = 0.997$ and the the Durbin-Watson statistic (d) equal to 0.53. The most extreme, the found is an equation with $R^2 = 0.999$ and $d = 0.093$. \n\nThese clear examples of what is called spurious regression, where the results look statistically impressive but are in fact misleading, falsely suggesting a strong relationship between the variables when no such relationship exists.\n\nThis honestly made me laugh because, during my internships, I saw many colleagues using regression models for time series data, evaluating performance purely based on the $R^2$, especially when it was high (close to 1), along with metrics like the Mean Squared Error (MSE) or the Mean Absolute Error (MAE), without taking into account the autocorrelation of the residuals.\n\nWhen I came across this article, I realized how common this issue is. That is why I wanted to show you how crucial to always check the autocorrelation of the residuals when performing a regression analysis with time series data.\n\n## Contribution\n\nOur post provides :\n\n- A detailed explanation of the results from @granger1974spurious.\n- A Python simulation replicating the key results presented in their article.\n\n## Objectives\n\nThe classic regression model tests assume independent data. However, in the case of time series, observations are not independent — they are autocorrelated, and sometimes we even observe what’s called serial correlation, which is the correlation between successive values of the series. For example, today’s GDP is strongly correlated with the GDP of the previous quarter. This autocorrelation of the data can lead to correlation in the errors, which influence the results of the regression analysis.\n\nThere are three main consequences of autocorrelated errors in regression analysis:\n\n- Estimation of the coefficients of the model is inefficient.\n- Forecasts based on the regression equation are sub-optimal.\n- The hypothesis tests of the coefficients are invalid.\n\nThe first two points are well documented in the literature. However, @granger1974spurious focused specifically on the third point, showing that it’s possible to obtain very high $R^2$ values, even though the models have no real economic meaning — what we call spurious regressions.\n\nTo support their analysis, the authors first present some key results from time series analysis. Then, they explain how nonsense regressions can occur, and finally, they run simulations to demonstrate that if the variables follow a random walk (or close to it), and if you include variables in the regression that shouldn’t be there, then it becomes the rule rather than the exception to obtain misleading results\n\nTo walk you through this paper, the next section will introduce the random walk and the ARIMA(0,1,1) process. In section 3, we will explain how @granger1974spurious describe the emergence of nonsense regressions, with examples illustrated in section 4. Finally, we’ll show how to avoid spurious regressions when working with time series data.\n\n# Random Walk and ARIMA(0,1,1) Process\n\n## Random Walk\n\nLet $X_t$ be a time series. We say that $X_t$ follows a random walk if its representation is given by:\n\n$$\nX_t = X_{t-1} + \\epsilon_t\n$$ {#eq-random_walk}\n\nwhere $\\epsilon_t$ is a white noise. It can be writen as a sum of white noise :\n\n$$\nX_t =  X_0 + \\sum_{i=1}^{t} \\epsilon_i\n$$ {#eq-random_walk2}\n\nwhere $X_0$ is the initial value of the series.\n\nThe random walk is a non-stationary time series. In fact, if we take the Variance of $X_t$, we have:\n\n$$\nV(X_t) = t\\sigma^2\n$$ {#eq-variance_random_walk}\n\nwhich is increasing with time. \n\nThis model have been found to represent well certain price series, particularly in speculative markets.\n\nFor many others series,\n\n$$\nX_t - X_{t-1} = \\epsilon_t - \\theta \\epsilon_{t-1}\n$$ {#eq-random_walk_ar}\n\n\n\nhas been found to provide a good representation.\n\nThose non-stationary series are often employed as bench-marks against which the forecasting performance of other models is judged. \n\n## ARIMA(0,1,1) Process\n\nThe ARIMA(0,1,1) process is given by:\n\n$$\nX_t = X_{t-1} + \\epsilon_t - \\theta \\epsilon_{t-1}\n$$ {#eq-arima_0_1_1}\n\nwhere $\\epsilon_t$ is a white noise. The ARIMA(0,1,1) process is non-stationary. It can be written as a sum of independent random walk and white noise :\n\n$$\nX_t =  X_0 + random walk + white noise\n$$ {#eq-arima_0_1_1_2}\n\nIn the next section, we will see how Nonsense Regression can arise when we regress a dependent series on independent series that follow a random walk.\n\n# Random walk can lead to Nonsense Regression\n\nFirst, let's recall the linear regression model.\nThe linear regression model is given by:\n\n$$\nY = X\\beta + \\epsilon\n$$ {#eq-regression}\n\n\nwhere $Y$  is a T x 1 vector of the dependent variable, $\\beta$ is a K x 1 vector of the coefficients, $X$ is a T x K matrix of the independent containing a column of ones and (K-1) columns and T observations on each of (K-1) independent variables which are stochastic, but distributed independently of the $T\\times1$ vector of the errors $\\epsilon$. It is generally assumed that :\n$$\nE(\\epsilon) = 0\n$$ {#eq-expectation_error}\n\nand\n$$\nE(\\epsilon\\epsilon') = \\sigma^2I\n$$ {#eq-expectation_error2}\n\nwhere $I$ is the identity matrix.\n\nA test of contribution of independent variable of the explanation of the dependent variable is the F-test. The null hypothesis of the test is given by:\n\n$$\nH_0: \\beta_1 = \\beta_2 = \\ldots = \\beta_{K-1} = 0\n$$ {#eq-null_hypothesis}\n\nand the statistic of the test is given by:\n\n$$\nF = \\frac{(R^2/(K-1))}{(1-R^2)/(T-K)}\n$$ {#eq-f_test}\n\nwhere $R^2$ is the coefficient of determination.\n\nIf we want to construct the statistic of the test, let's assume that the null hypothesis is true, and one try to fit a regression of the form (@eq-regression) to the levels of economic time series. Suppose next that these series are not stationary, or highly autocorrelated. In such situation, the test procedure is invalid since F in(@eq-f_test) is not distributed as an F-distribution under the null hypothesis (@eq-null_hypothesis). In fact,under the null hypothesis, the errors or residuals from (@eq-regression) is given by:\n\n$\\epsilon_t = Y_t - X\\beta_0$ ; t = 1, 2, ..., T,\n\nwill have the same autocorrelation structure as the original series Y.\n\nSome idea of the distribution problem can arise in the situation when :\n\n$$\nY_t = \\beta_0 + X_t\\beta_1 + \\epsilon_t\n$$ \n\nwhere $Y_t$ and $X_t$ follow the independent first-order autoregressive process:\n\n$Y_t = \\rho Y_{t-1} + \\eta_t$, and $X_t = \\rho^* X_{t-1} + \\nu_t$\n\nwhere $\\eta_t$ and $\\nu_t$ are white noise.\n\nWe know that in this case, $R^2$ is the square of the correlation between $Y_t$ and $X_t$. Ils utilisent le résultat de Kendall dans l'article @knowles1954exercises qui exprime la variance de $R$ :\n\n$$\nVar(R) = \\frac{1}{T}\\frac{1+\\rho \\rho^*}{1-\\rho \\rho^*}\n$$\n\nsince R is constrained to lie between -1 and 1, if its variance is greater than 1/3, the distribution of R cannot have a mode at 0. This imply that $\\rho \\rho^* >\\frac{T-1}{T+1}$. Thus, for example if T=20 and $\\rho = \\rho^*$, a distribution that is not unimodal at O will be obtained if $\\rho > 0.86$, and if $\\rho = 0.9$, $var(R) = 0.47$. So the $E(R^2)$ will be close to 0.47. \n\nHere’s an improved and corrected version, keeping your tone and touch while improving the fluency and clarity:\n\n\nIt has been shown that when $\\rho$ is close to 1, $R^2$ can be **very high**, suggesting a strong relationship between $Y_t$ and $X_t$. However, in reality, the two series are completely independent. When $\\rho$ is near 1, both series behave like random walks or near-random walks. On top of that, both series are **highly autocorrelated**, which causes the **residuals from the regression** to also be strongly autocorrelated. As a result, the **Durbin-Watson statistic** d will be **very low**. This is why a high $R^2$ in this context should never be taken as evidence of a true relationship between the two series.\n\nTo explore the possibility of obtaining a spurious regression when regressing two independent random walks, a series of simulations proposed by @granger1974spurious will be conducted in the next section.\n\n# Simulation results using python.\n\nIn this section, we will show using simulations that using the regression model with independent random walks bias the estimation of the coefficients and the hypothesis tests of the coefficients are invalid.\n\nA regression equation proposed by @granger1974spurious is given by:\n$$\nY_t = \\beta_0 + X_t\\beta_1 + \\epsilon_t\n$$\n\nwhere $Y_t$ and $X_t$ were, in fact, generated as independent random walks each of length 50. The values\n$$\nS = \\frac{\\lvert \\hat{\\beta}_1 \\rvert}{\\sqrt{\\hat{SE}(\\hat{\\beta}_1)}},\n$$\n\nrepresenting the statistic for testing the significance of $\\beta_1$, for 100 simulations will be reported in the table below.\n\nLet's carry out the  simulation using python.\n\n::: {#8e4fcf95 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\n\nnp.random.seed(123)\nM = 100 \nn = 50\nS = np.zeros(M)\nfor i in range(M):\n#---------------------------------------------------------------\n# Generate the data\n#---------------------------------------------------------------\n    espilon_y = np.random.normal(0, 1, n)\n    espilon_x = np.random.normal(0, 1, n)\n\n    Y = np.cumsum(espilon_y)\n    X = np.cumsum(espilon_x)\n#---------------------------------------------------------------\n# Fit the model\n#---------------------------------------------------------------\n    X = sm.add_constant(X)\n    model = sm.OLS(Y, X).fit()\n#---------------------------------------------------------------\n# Compute the statistic\n#------------------------------------------------------\n    S[i] = np.abs(model.params[1])/model.bse[1]\n```\n:::\n\n\n::: {#37ce2782 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\n\n\n#------------------------------------------------------#    Maximum value of S\n#------------------------------------------------------\nS_max = int(np.ceil(max(S)))\n\n#------------------------------------------------------#    Create bins\n#------------------------------------------------------\nbins = np.arange(0, S_max + 2, 1)  \n\n#------------------------------------------------------#    Compute the histogram\n#------------------------------------------------------\nfrequency, bin_edges = np.histogram(S, bins=bins)\n\n#------------------------------------------------------#    Create a dataframe\n#------------------------------------------------------\n\ndf = pd.DataFrame({\n    \"S Interval\": [f\"{int(bin_edges[i])}-{int(bin_edges[i+1])}\" for i in range(len(bin_edges)-1)],\n    \"Frequency\": frequency\n})\nprint(df)\nprint(np.mean(S))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   S Interval  Frequency\n0         0-1         13\n1         1-2         16\n2         2-3         12\n3         3-4          8\n4         4-5         14\n5         5-6          8\n6         6-7          7\n7         7-8          5\n8         8-9          7\n9        9-10          0\n10      10-11          3\n11      11-12          4\n12      12-13          0\n13      13-14          1\n14      14-15          1\n15      15-16          1\n16      16-17          0\n4.58501785392309\n```\n:::\n:::\n\n\nThe null hypothesis of no relationship between $Y_t$ and $X_t$ is rejected at the 5% level if $S > 2$. This table shows that the null hypothesis ($\\beta =0$) is wrongly rejected in about a quarter (71 times) of all cases. This is awkward because the two variables are independent random walks, meaning there’s no actual relationship. Let’s break down why this happens.\n\nIf $\\frac{\\hat{\\beta}_1}{\\hat{SE}}$ follows a $N(0,1)$, the expected value of S, its absolute value, should be $\\frac{\\sqrt{2}}{\\pi} \\approx 0.8$( $\\frac{2}{\\pi}$ is the mean of the absolute value of a standard normal distribution). However, the simulation results show an average of 4.59, meaning the estimated S is underestimated by a factor of $\\frac{4.59}{0.8} = 5.7$.\n \nIn classical statistics, we usually use a t-test threshold of around 2 to check the significance of a coefficient. However, these results show that, in this case, you’d actually need to use a threshold of 11.4 to properly test for significancen :\n\n$$\n2\\times \\frac{4.59}{0.8} = 11.4.\n$$\n\nInterpretation: We’ve just shown that including variables that don’t belong in the model — especially random walks — can lead to completely invalid significance tests for the coefficients.\n\nTo make their simulations even clearer, @granger1974spurious ran a series of regressions using variables that follow either a random walk or an ARIMA(0,1,1) process.\n\nHere is how they set up their simulations:\n\nThey regressed a dependent series $Y_t$  on m series $X_{j,t}$ (with j = 1, 2, ..., m), varying m from 1 to 5. varier m from 1 to 5. The dependent series $Y_t$ and the independent series $X_{j,t}$ follow the same types of process, and they tested four cases:\n\n- Cas 1 (Levels) : $Y_t$ et $X_{j,t}$ follow random walk.\n- Cas 2 (Differences) : They use the first difference sof the random walk, which are stationary.\n- Cas 3 (Levels) : $Y_t$ et $X_{j,t}$ follow ARIMA(0,1,1).\n- Cas 4 (Differences) : They use the first differences of the previous ARIMA(0,1,1) which are stationary.\n\nEach series has a length of 50 observations, and they ran 100 simulations for each case.\n\nAll errors terms are distributed as $N(0,1)$ and the ARIMA(0,1,1) series are derived as the sum of the random walk and independent white noise. The simulation results, based on 100 replications with series of length 50, are summarized in the next table.\n\n::: {#d03e5b7e .cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nfrom statsmodels.stats.stattools import durbin_watson\nfrom tabulate import tabulate\n\nnp.random.seed(1)  # Pour rendre les résultats reproductibles\n\n#------------------------------------------------------\n# Definition of functions\n#------------------------------------------------------\n\ndef generate_random_walk(T):\n    \"\"\"\n    Génère une série de longueur T suivant un random walk :\n        Y_t = Y_{t-1} + e_t,\n    où e_t ~ N(0,1).\n    \"\"\"\n    e = np.random.normal(0, 1, size=T)\n    return np.cumsum(e)\n\ndef generate_arima_0_1_1(T):\n    \"\"\"\n    Génère un ARIMA(0,1,1) selon la méthode de Granger & Newbold :\n    la série est obtenue en additionnant une marche aléatoire et un bruit blanc indépendant.\n    \"\"\"\n    rw = generate_random_walk(T)\n    wn = np.random.normal(0, 1, size=T)\n    return rw + wn\n\ndef difference(series):\n    \"\"\"\n    Calcule la différence première d'une série unidimensionnelle.\n    Retourne une série de longueur T-1.\n    \"\"\"\n    return np.diff(series)\n\n#------------------------------------------------------\n# Paramètres\n#------------------------------------------------------\n\nT = 50           # longueur de chaque série\nn_sims = 100     # nombre de simulations Monte Carlo\nalpha = 0.05     # seuil de significativité\n```\n:::\n\n\n::: {#5109d5eb .cell execution_count=4}\n``` {.python .cell-code}\ndef run_simulation_case(case_name, m_values=[1,2,3,4,5]):\n    \"\"\"\n    case_name : un identifiant pour le type de génération :\n        - 'rw-levels' : random walk (levels)\n        - 'rw-diffs'  : differences of RW (white noise)\n        - 'arima-levels' : ARIMA(0,1,1) en niveaux\n        - 'arima-diffs'  : différences d'un ARIMA(0,1,1) => MA(1)\n    \n    m_values : liste du nombre de régresseurs.\n    \n    Retourne un DataFrame avec pour chaque m :\n        - % de rejets de H0\n        - Durbin-Watson moyen\n        - R^2_adj moyen\n        - % de R^2 > 0.1\n    \"\"\"\n    results = []\n    \n    for m in m_values:\n        count_reject = 0\n        dw_list = []\n        r2_adjusted_list = []\n        \n        for _ in range(n_sims):\n#--------------------------------------\n# 1) Generation of independents de Y_t and X_{j,t}.\n#----------------------------------------\n            if case_name == 'rw-levels':\n                Y = generate_random_walk(T)\n                Xs = [generate_random_walk(T) for __ in range(m)]\n            \n            elif case_name == 'rw-diffs':\n                # Y et X sont les différences d'un RW, i.e. ~ white noise\n                Y_rw = generate_random_walk(T)\n                Y = difference(Y_rw)\n                Xs = []\n                for __ in range(m):\n                    X_rw = generate_random_walk(T)\n                    Xs.append(difference(X_rw))\n                # NB : maintenant Y et Xs ont longueur T-1\n                # => ajuster T_effectif = T-1\n                # => on prendra T_effectif points pour la régression\n            \n            elif case_name == 'arima-levels':\n                Y = generate_arima_0_1_1(T)\n                Xs = [generate_arima_0_1_1(T) for __ in range(m)]\n            \n            elif case_name == 'arima-diffs':\n                # Différences d'un ARIMA(0,1,1) => MA(1)\n                Y_arima = generate_arima_0_1_1(T)\n                Y = difference(Y_arima)\n                Xs = []\n                for __ in range(m):\n                    X_arima = generate_arima_0_1_1(T)\n                    Xs.append(difference(X_arima))\n            \n            # 2) Prépare les données pour la régression\n            #    Selon le cas, la longueur est T ou T-1\n            if case_name in ['rw-levels','arima-levels']:\n                Y_reg = Y\n                X_reg = np.column_stack(Xs) if m>0 else np.array([])\n            else:\n                # dans les cas de différences, la longueur est T-1\n                Y_reg = Y\n                X_reg = np.column_stack(Xs) if m>0 else np.array([])\n            \n            # 3) Régression OLS\n            X_with_const = sm.add_constant(X_reg)  # Ajout de l'ordonnée à l'origine\n            model = sm.OLS(Y_reg, X_with_const).fit()\n            \n            # 4) Test global F : H0 : tous les beta_j = 0\n            #    On regarde si p-value < alpha\n            if model.f_pvalue is not None and model.f_pvalue < alpha:\n                count_reject += 1\n            \n            # 5) R^2, Durbin-Watson\n            r2_adjusted_list.append(model.rsquared_adj)\n            \n            \n            dw_list.append(durbin_watson(model.resid))\n        \n        # Statistiques sur n_sims répétitions\n        reject_percent = 100 * count_reject / n_sims\n        dw_mean = np.mean(dw_list)\n        r2_mean = np.mean(r2_adjusted_list)\n        r2_above_0_7_percent = 100 * np.mean(np.array(r2_adjusted_list) > 0.7)\n        \n        results.append({\n            'm': m,\n            'Reject %': reject_percent,\n            'Mean DW': dw_mean,\n            'Mean R^2': r2_mean,\n            '% R^2_adj>0.7': r2_above_0_7_percent\n        })\n    \n    return pd.DataFrame(results)\n```\n:::\n\n\n::: {#3c068a3a .cell execution_count=5}\n``` {.python .cell-code}\ncases = ['rw-levels', 'rw-diffs', 'arima-levels', 'arima-diffs']\nall_results = {}\n\nfor c in cases:\n    df_res = run_simulation_case(c, m_values=[1,2,3,4,5])\n    all_results[c] = df_res\n```\n:::\n\n\n::: {#346e7203 .cell execution_count=6}\n``` {.python .cell-code}\nfor case, df_res in all_results.items():\n    print(f\"\\n\\n{case}\")\n    print(tabulate(df_res, headers='keys', tablefmt='fancy_grid'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\nrw-levels\n╒════╤═════╤════════════╤═══════════╤════════════╤═════════════════╕\n│    │   m │   Reject % │   Mean DW │   Mean R^2 │   % R^2_adj>0.7 │\n╞════╪═════╪════════════╪═══════════╪════════════╪═════════════════╡\n│  0 │   1 │         74 │  0.33973  │   0.240534 │               4 │\n├────┼─────┼────────────┼───────────┼────────────┼─────────────────┤\n│  1 │   2 │         86 │  0.481779 │   0.416778 │              15 │\n├────┼─────┼────────────┼───────────┼────────────┼─────────────────┤\n│  2 │   3 │         93 │  0.561673 │   0.493484 │              23 │\n├────┼─────┼────────────┼───────────┼────────────┼─────────────────┤\n│  3 │   4 │         98 │  0.679036 │   0.570376 │              28 │\n├────┼─────┼────────────┼───────────┼────────────┼─────────────────┤\n│  4 │   5 │         96 │  0.800295 │   0.58997  │              35 │\n╘════╧═════╧════════════╧═══════════╧════════════╧═════════════════╛\n\n\nrw-diffs\n╒════╤═════╤════════════╤═══════════╤═════════════╤═════════════════╕\n│    │   m │   Reject % │   Mean DW │    Mean R^2 │   % R^2_adj>0.7 │\n╞════╪═════╪════════════╪═══════════╪═════════════╪═════════════════╡\n│  0 │   1 │          5 │   1.99294 │  0.00168242 │               0 │\n├────┼─────┼────────────┼───────────┼─────────────┼─────────────────┤\n│  1 │   2 │          9 │   1.97273 │  0.00602094 │               0 │\n├────┼─────┼────────────┼───────────┼─────────────┼─────────────────┤\n│  2 │   3 │          6 │   1.95948 │  0.00387684 │               0 │\n├────┼─────┼────────────┼───────────┼─────────────┼─────────────────┤\n│  3 │   4 │          9 │   1.97925 │  0.00627632 │               0 │\n├────┼─────┼────────────┼───────────┼─────────────┼─────────────────┤\n│  4 │   5 │          2 │   1.93948 │ -0.00971288 │               0 │\n╘════╧═════╧════════════╧═══════════╧═════════════╧═════════════════╛\n\n\narima-levels\n╒════╤═════╤════════════╤═══════════╤════════════╤═════════════════╕\n│    │   m │   Reject % │   Mean DW │   Mean R^2 │   % R^2_adj>0.7 │\n╞════╪═════╪════════════╪═══════════╪════════════╪═════════════════╡\n│  0 │   1 │         64 │  0.698287 │   0.206495 │               2 │\n├────┼─────┼────────────┼───────────┼────────────┼─────────────────┤\n│  1 │   2 │         73 │  0.886599 │   0.299502 │               6 │\n├────┼─────┼────────────┼───────────┼────────────┼─────────────────┤\n│  2 │   3 │         87 │  1.03089  │   0.364599 │               6 │\n├────┼─────┼────────────┼───────────┼────────────┼─────────────────┤\n│  3 │   4 │         94 │  1.19611  │   0.447544 │              13 │\n├────┼─────┼────────────┼───────────┼────────────┼─────────────────┤\n│  4 │   5 │         89 │  1.26888  │   0.421604 │              19 │\n╘════╧═════╧════════════╧═══════════╧════════════╧═════════════════╛\n\n\narima-diffs\n╒════╤═════╤════════════╤═══════════╤════════════╤═════════════════╕\n│    │   m │   Reject % │   Mean DW │   Mean R^2 │   % R^2_adj>0.7 │\n╞════╪═════╪════════════╪═══════════╪════════════╪═════════════════╡\n│  0 │   1 │         10 │   2.6299  │ 0.00465141 │               0 │\n├────┼─────┼────────────┼───────────┼────────────┼─────────────────┤\n│  1 │   2 │         16 │   2.55665 │ 0.0173058  │               0 │\n├────┼─────┼────────────┼───────────┼────────────┼─────────────────┤\n│  2 │   3 │          5 │   2.59995 │ 0.00913797 │               0 │\n├────┼─────┼────────────┼───────────┼────────────┼─────────────────┤\n│  3 │   4 │          6 │   2.5216  │ 0.0139963  │               0 │\n├────┼─────┼────────────┼───────────┼────────────┼─────────────────┤\n│  4 │   5 │          6 │   2.47298 │ 0.00864894 │               0 │\n╘════╧═════╧════════════╧═══════════╧════════════╧═════════════════╛\n```\n:::\n:::\n\n\nInterpretation of the results :\n\n- It is seen that the probability of no rejecting the null hypothesis of no relationship between $Y_t$ and $X_{j,t}$ becomes very small when m>=3 when regressions are made with random walk series (rw-levels). The $R^2$ and the Mean Durbin-Watson increase. Simalar results are obtained when the regressions are made with ARIMA(0,1,1) series (arima-levels). \n\n- When white noise series (rw-diffs) are used, classical regression analysis is valid, since the errors series will be white noise and least squares will be efficient.\n\n- However, when the regressions are made with the differences of ARIMA(0,1,1) series (arima-diffs) or first order moving average series MA(1) process, the null hypothesis is rejected, on average $\\frac{10+16+5+6+6}{5} = 8.6$ greater than 5% of the time.\n\nIf your variables are random walks or close to them, and you include unnecessary variables in your regression, you will often get fallacious results. High $R^2$ or $R^2_{adjusted}$ and low Durbin-Watson values do not confirm a true relationship, but instead indicate a likely spurious one.\n\n# How to avoid spurious regression in time series\n\nIf one performs a regression analysis with time series data, and finds that the residuals are strongly autocorrelated, there is a serious problem when it comes to interpreting the coefficients of the equation. To check for autocorrelation in the residuals, one can use the Durbin-Watson test, the Ljung-Box or the Portmanteau test. \n\nBased on the study above, we can conclude that if a regression analysis performed with economical variables produces strongly autocorrelated residuals, meaning to a law low Durbin-Watson statistic, then the results of the analysis are likely to be spurious whatever the value of the coefficient of determination $R^2$ observed.\n\nIn such cases, it is important to understand where is the mis-specification comes from. According to the litterature, mis-specification usually falls into three categories : (i) the omission of a relevant variable, (ii) the inclusion of an irrelevant variable, or (iii) autocorrelation of the errors. Most of the time, mis-specification comes from a mix of these three sources.\n\nTo avoid spurious regression in time series, several recommendations can be made:\n\n- The first recommendation is to select the right macroeconomic variables that are likely to explain the dependent variable. This can be done by reviewing the literature or consulting experts in the field.\n\n- The second recommendation is to stationarize the series by taking first differences. In most cases, the first differences of macroeconomic variables are stationary and still easy to interpret. For macroeconomic data, it’s strongly recommended to difference the series once to reduce the autocorrelation of the residuals, especially when the sample size is small. There is indeed sometimes strong serial correlation observed in these variables. A simple calculation shows that the first differences will almost always have much smaller serial correlations than the original series.\n\n- The third recommendation is to use the Box-Jenkins methodology to model each macroeconomic variable individually, and then search for relationships between the series by relating the residuals from each individual model. The idea here is that the Box-Jenkins process extracts the explained part of the series, leaving the residuals, which contain only what can’t be explained by the series’ own past behavior. This makes it easier to check whether these unexplained parts (residuals) are related across variables.\n\n# Conclusion\n\nMany econometrics textbooks warn about specification errors in regression models, but the problem still shows up in many published papers. @granger1974spurious highlighted the risk of spurious regressions, where you get a high paired with very low Durbin-Watson statistics.\n\nUsing Python simulations, we showed some of the main causes of these spurious regressions, especially including variables that don’t belong in the model and are highly autocorrelated. We also demonstrated how these issues can completely distort hypothesis tests on the coefficients.\n\nHopefully, this post will help reduce the risk of spurious regressions in future econometric analyses.\n\n",
    "supporting": [
      "spurious_reg_files"
    ],
    "filters": [],
    "includes": {}
  }
}